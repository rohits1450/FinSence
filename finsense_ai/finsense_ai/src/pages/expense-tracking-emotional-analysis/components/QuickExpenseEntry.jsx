import React, { useState, useEffect } from 'react';
import Icon from '../../../components/AppIcon';
import Button from '../../../components/ui/Button';
import Input from '../../../components/ui/Input';
import Select from '../../../components/ui/Select';

const QuickExpenseEntry = ({ 
  onAddExpense, 
  culturalContext = 'default',
  emotionalState = 'calm',
  className = '' 
}) => {
  const [amount, setAmount] = useState('');
  const [category, setCategory] = useState('');
  const [description, setDescription] = useState('');
  const [selectedEmotion, setSelectedEmotion] = useState('');
  const [isVoiceRecording, setIsVoiceRecording] = useState(false);
  const [voiceNote, setVoiceNote] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  const getCategoryOptions = () => {
    if (culturalContext === 'hindi') {
      return [
        { value: 'food', label: 'üçΩÔ∏è ‡§≠‡•ã‡§ú‡§®', description: '‡§¶‡•à‡§®‡§ø‡§ï ‡§≠‡•ã‡§ú‡§® ‡§î‡§∞ ‡§®‡§æ‡§∂‡•ç‡§§‡§æ' },
        { value: 'transport', label: 'üöó ‡§™‡§∞‡§ø‡§µ‡§π‡§®', description: '‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§î‡§∞ ‡§µ‡§æ‡§π‡§® ‡§ñ‡§∞‡•ç‡§ö' },
        { value: 'festival', label: 'üéâ ‡§§‡•ç‡§Ø‡•ã‡§π‡§æ‡§∞', description: '‡§§‡•ç‡§Ø‡•ã‡§π‡§æ‡§∞‡•Ä ‡§ñ‡§∞‡•Ä‡§¶‡§æ‡§∞‡•Ä ‡§î‡§∞ ‡§â‡§™‡§π‡§æ‡§∞' },
        { value: 'family', label: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ ‡§™‡§æ‡§∞‡§ø‡§µ‡§æ‡§∞‡§ø‡§ï', description: '‡§™‡§æ‡§∞‡§ø‡§µ‡§æ‡§∞‡§ø‡§ï ‡§ú‡§ø‡§Æ‡•ç‡§Æ‡•á‡§¶‡§æ‡§∞‡§ø‡§Ø‡§æ‡§Ç' },
        { value: 'healthcare', label: 'üè• ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø', description: '‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§î‡§∞ ‡§¶‡§µ‡§æ‡§á‡§Ø‡§æ‡§Ç' },
        { value: 'education', label: 'üìö ‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ', description: '‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§î‡§∞ ‡§ï‡•ã‡§∞‡•ç‡§∏' },
        { value: 'traditional', label: 'üïâÔ∏è ‡§™‡§æ‡§∞‡§Ç‡§™‡§∞‡§ø‡§ï', description: '‡§ß‡§æ‡§∞‡•ç‡§Æ‡§ø‡§ï ‡§î‡§∞ ‡§∏‡§æ‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø‡§ï' },
        { value: 'entertainment', label: 'üé¨ ‡§Æ‡§®‡•ã‡§∞‡§Ç‡§ú‡§®', description: '‡§´‡§ø‡§≤‡•ç‡§Æ ‡§î‡§∞ ‡§Æ‡§®‡•ã‡§∞‡§Ç‡§ú‡§®' },
        { value: 'shopping', label: 'üõçÔ∏è ‡§ñ‡§∞‡•Ä‡§¶‡§æ‡§∞‡•Ä', description: '‡§ï‡§™‡§°‡§º‡•á ‡§î‡§∞ ‡§∏‡§æ‡§Æ‡§æ‡§®' },
        { value: 'utilities', label: 'üí° ‡§â‡§™‡§Ø‡•ã‡§ó‡§ø‡§§‡§æ‡§è‡§Ç', description: '‡§¨‡§ø‡§ú‡§≤‡•Ä, ‡§™‡§æ‡§®‡•Ä, ‡§á‡§Ç‡§ü‡§∞‡§®‡•á‡§ü' }
      ];
    }
    return [
      { value: 'food', label: 'üçΩÔ∏è Food & Dining', description: 'Meals, groceries, restaurants' },
      { value: 'transport', label: 'üöó Transportation', description: 'Travel, fuel, public transport' },
      { value: 'festival', label: 'üéâ Festival Expenses', description: 'Festival shopping and gifts' },
      { value: 'family', label: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Family Obligations', description: 'Family responsibilities' },
      { value: 'healthcare', label: 'üè• Healthcare', description: 'Medical and medicines' },
      { value: 'education', label: 'üìö Education', description: 'Learning and courses' },
      { value: 'traditional', label: 'üïâÔ∏è Traditional Purchases', description: 'Religious and cultural items' },
      { value: 'entertainment', label: 'üé¨ Entertainment', description: 'Movies and leisure' },
      { value: 'shopping', label: 'üõçÔ∏è Shopping', description: 'Clothes and accessories' },
      { value: 'utilities', label: 'üí° Utilities', description: 'Electricity, water, internet' }
    ];
  };

  const getEmotionOptions = () => {
    if (culturalContext === 'hindi') {
      return [
        { value: 'happy', label: 'üòä ‡§ñ‡•Å‡§∂', description: '‡§ñ‡•Å‡§∂‡•Ä ‡§î‡§∞ ‡§∏‡§Ç‡§§‡•Å‡§∑‡•ç‡§ü‡§ø' },
        { value: 'stressed', label: 'üò∞ ‡§§‡§®‡§æ‡§µ‡§ó‡•ç‡§∞‡§∏‡•ç‡§§', description: '‡§ö‡§ø‡§Ç‡§§‡§æ ‡§î‡§∞ ‡§§‡§®‡§æ‡§µ' },
        { value: 'excited', label: 'ü§© ‡§â‡§§‡•ç‡§∏‡§æ‡§π‡§ø‡§§', description: '‡§â‡§§‡•ç‡§∏‡§æ‡§π ‡§î‡§∞ ‡§ú‡•ã‡§∂' },
        { value: 'sad', label: 'üò¢ ‡§â‡§¶‡§æ‡§∏', description: '‡§¶‡•Å‡§ñ ‡§î‡§∞ ‡§®‡§ø‡§∞‡§æ‡§∂‡§æ' },
        { value: 'angry', label: 'üò† ‡§ó‡•Å‡§∏‡•ç‡§∏‡§æ', description: '‡§ï‡•ç‡§∞‡•ã‡§ß ‡§î‡§∞ ‡§ö‡§ø‡§°‡§º‡§ö‡§ø‡§°‡§º‡§æ‡§π‡§ü' },
        { value: 'calm', label: 'üòå ‡§∂‡§æ‡§Ç‡§§', description: '‡§∂‡§æ‡§Ç‡§§‡§ø ‡§î‡§∞ ‡§∏‡§Ç‡§Ø‡§Æ' },
        { value: 'anxious', label: 'üòü ‡§ö‡§ø‡§Ç‡§§‡§ø‡§§', description: '‡§ö‡§ø‡§Ç‡§§‡§æ ‡§î‡§∞ ‡§¨‡•á‡§ö‡•à‡§®‡•Ä' },
        { value: 'guilty', label: 'üòî ‡§Ö‡§™‡§∞‡§æ‡§ß‡§¨‡•ã‡§ß', description: '‡§™‡§õ‡§§‡§æ‡§µ‡§æ ‡§î‡§∞ ‡§Ö‡§™‡§∞‡§æ‡§ß‡§¨‡•ã‡§ß' }
      ];
    }
    return [
      { value: 'happy', label: 'üòä Happy', description: 'Joy and satisfaction' },
      { value: 'stressed', label: 'üò∞ Stressed', description: 'Anxiety and tension' },
      { value: 'excited', label: 'ü§© Excited', description: 'Enthusiasm and thrill' },
      { value: 'sad', label: 'üò¢ Sad', description: 'Sadness and disappointment' },
      { value: 'angry', label: 'üò† Angry', description: 'Anger and irritation' },
      { value: 'calm', label: 'üòå Calm', description: 'Peace and composure' },
      { value: 'anxious', label: 'üòü Anxious', description: 'Worry and restlessness' },
      { value: 'guilty', label: 'üòî Guilty', description: 'Regret and guilt' }
    ];
  };

  const formatIndianNumber = (value) => {
    if (!value) return '';
    const numStr = value?.toString();
    const lastThree = numStr?.substring(numStr?.length - 3);
    const otherNumbers = numStr?.substring(0, numStr?.length - 3);
    if (otherNumbers !== '') {
      return otherNumbers?.replace(/\B(?=(\d{2})+(?!\d))/g, ',') + ',' + lastThree;
    } else {
      return lastThree;
    }
  };

  const handleAmountChange = (e) => {
    const value = e?.target?.value?.replace(/[^0-9]/g, '');
    setAmount(value);
  };

  const handleVoiceRecording = () => {
    if (!isVoiceRecording) {
      setIsVoiceRecording(true);
      // Simulate voice recording
      setTimeout(() => {
        setIsVoiceRecording(false);
        setVoiceNote(culturalContext === 'hindi' ?'‡§Ü‡§µ‡§æ‡§ú‡§º ‡§®‡•ã‡§ü ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ' :'Voice note recorded'
        );
      }, 3000);
    }
  };

  const handleSubmit = async (e) => {
    e?.preventDefault();
    if (!amount || !category || !selectedEmotion) return;

    setIsSubmitting(true);
    
    const expenseData = {
      id: Date.now(),
      amount: parseFloat(amount),
      category,
      description,
      emotion: selectedEmotion,
      voiceNote,
      timestamp: new Date(),
      culturalContext
    };

    try {
      await onAddExpense(expenseData);
      
      // Reset form
      setAmount('');
      setCategory('');
      setDescription('');
      setSelectedEmotion('');
      setVoiceNote('');
    } catch (error) {
      console.error('Error adding expense:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const categoryOptions = getCategoryOptions();
  const emotionOptions = getEmotionOptions();

  return (
    <div className={`bg-card rounded-xl border shadow-soft p-6 ${className}`}>
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-3">
          <div className="w-10 h-10 bg-gradient-to-br from-primary to-secondary rounded-lg flex items-center justify-center">
            <Icon name="Plus" size={20} color="white" />
          </div>
          <div>
            <h2 className="text-lg font-heading text-foreground">
              {culturalContext === 'hindi' ? '‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§ñ‡§∞‡•ç‡§ö ‡§ú‡•ã‡§°‡§º‡•á‡§Ç' : 'Quick Expense Entry'}
            </h2>
            <p className="text-sm text-muted-foreground">
              {culturalContext === 'hindi' ?'‡§Ö‡§™‡§®‡•Ä ‡§≠‡§æ‡§µ‡§®‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ñ‡§∞‡•ç‡§ö ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞‡•á‡§Ç' :'Track expenses with your emotions'
              }
            </p>
          </div>
        </div>
        
        <Button
          variant="outline"
          size="sm"
          onClick={handleVoiceRecording}
          disabled={isVoiceRecording}
          iconName={isVoiceRecording ? "MicIcon" : "Mic"}
          iconPosition="left"
          className={isVoiceRecording ? "voice-active" : ""}
        >
          {isVoiceRecording 
            ? (culturalContext === 'hindi' ? '‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó...' : 'Recording...')
            : (culturalContext === 'hindi' ? '‡§Ü‡§µ‡§æ‡§ú‡§º' : 'Voice')
          }
        </Button>
      </div>
      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Amount Input */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="relative">
            <Input
              label={culturalContext === 'hindi' ? '‡§∞‡§æ‡§∂‡§ø (‚Çπ)' : 'Amount (‚Çπ)'}
              type="text"
              value={amount ? `‚Çπ${formatIndianNumber(amount)}` : ''}
              onChange={handleAmountChange}
              placeholder={culturalContext === 'hindi' ? '‚Çπ1,00,000' : '‚Çπ1,00,000'}
              required
              className="text-lg font-medium"
            />
            {amount && (
              <div className="absolute right-3 top-9 text-sm text-muted-foreground">
                {culturalContext === 'hindi' ? '‡§∞‡•Å‡§™‡§Ø‡•á' : 'Rupees'}
              </div>
            )}
          </div>

          <Select
            label={culturalContext === 'hindi' ? '‡§∂‡•ç‡§∞‡•á‡§£‡•Ä' : 'Category'}
            options={categoryOptions}
            value={category}
            onChange={setCategory}
            placeholder={culturalContext === 'hindi' ? '‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ‡§ö‡•Å‡§®‡•á‡§Ç' : 'Select category'}
            required
            searchable
          />
        </div>

        {/* Emotion and Description */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <Select
            label={culturalContext === 'hindi' ? '‡§Ü‡§™‡§ï‡•Ä ‡§≠‡§æ‡§µ‡§®‡§æ' : 'Your Emotion'}
            options={emotionOptions}
            value={selectedEmotion}
            onChange={setSelectedEmotion}
            placeholder={culturalContext === 'hindi' ? '‡§≠‡§æ‡§µ‡§®‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç' : 'Select emotion'}
            required
          />

          <Input
            label={culturalContext === 'hindi' ? '‡§µ‡§ø‡§µ‡§∞‡§£ (‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï)' : 'Description (Optional)'}
            type="text"
            value={description}
            onChange={(e) => setDescription(e?.target?.value)}
            placeholder={culturalContext === 'hindi' ?'‡§ñ‡§∞‡•ç‡§ö ‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£...' :'Expense description...'
            }
          />
        </div>

        {/* Voice Note Display */}
        {voiceNote && (
          <div className="p-3 bg-primary/5 rounded-lg border border-primary/20">
            <div className="flex items-center space-x-2">
              <Icon name="Mic" size={16} className="text-primary" />
              <span className="text-sm font-medium text-primary">
                {culturalContext === 'hindi' ? '‡§Ü‡§µ‡§æ‡§ú‡§º ‡§®‡•ã‡§ü:' : 'Voice Note:'}
              </span>
            </div>
            <p className="text-sm text-primary/80 mt-1">{voiceNote}</p>
          </div>
        )}

        {/* Emotional Context Indicator */}
        {selectedEmotion && (
          <div className="p-4 bg-muted/30 rounded-lg">
            <div className="flex items-center space-x-3">
              <div className="text-2xl">
                {emotionOptions?.find(e => e?.value === selectedEmotion)?.label?.split(' ')?.[0]}
              </div>
              <div>
                <p className="text-sm font-medium text-foreground">
                  {culturalContext === 'hindi' ? '‡§≠‡§æ‡§µ‡§®‡§æ‡§§‡•ç‡§Æ‡§ï ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠' : 'Emotional Context'}
                </p>
                <p className="text-xs text-muted-foreground">
                  {emotionOptions?.find(e => e?.value === selectedEmotion)?.description}
                </p>
              </div>
            </div>
          </div>
        )}

        {/* Submit Button */}
        <div className="flex space-x-3">
          <Button
            type="submit"
            variant="default"
            loading={isSubmitting}
            disabled={!amount || !category || !selectedEmotion}
            iconName="Plus"
            iconPosition="left"
            className="flex-1"
          >
            {isSubmitting 
              ? (culturalContext === 'hindi' ? '‡§ú‡•ã‡§°‡§º‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à...' : 'Adding...')
              : (culturalContext === 'hindi' ? '‡§ñ‡§∞‡•ç‡§ö ‡§ú‡•ã‡§°‡§º‡•á‡§Ç' : 'Add Expense')
            }
          </Button>
          
          <Button
            type="button"
            variant="outline"
            onClick={() => {
              setAmount('');
              setCategory('');
              setDescription('');
              setSelectedEmotion('');
              setVoiceNote('');
            }}
            iconName="RotateCcw"
            iconPosition="left"
          >
            {culturalContext === 'hindi' ? '‡§∞‡•Ä‡§∏‡•á‡§ü' : 'Reset'}
          </Button>
        </div>
      </form>
    </div>
  );
};

export default QuickExpenseEntry;